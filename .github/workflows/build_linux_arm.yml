name: Build AMD Linux Application

on: [push, pull_request]

jobs:
  build:
    name: Build Qt Project for Linux ARM
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Python dependencies
        run: |
          pip3 install setuptools wheel
          pip3 install aqtinstall==0.5.*

      - name: Install Qt for Linux ARM
        run: |
          python3 -m aqt install -O /home/runner/work/serial_port_debugger/Qt 5.15.2 linux desktop gcc_64

      - name: Install ARM cross-compilation tools
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf

      - name: Set up build environment
        run: |
          export PATH=/home/runner/work/serial_port_debugger/Qt/5.15.2/gcc_64/bin:$PATH
          export QTDIR=/home/runner/work/serial_port_debugger/Qt/5.15.2/gcc_64
          export LD_LIBRARY_PATH=/home/runner/work/serial_port_debugger/Qt/5.15.2/gcc_64/lib:$LD_LIBRARY_PATH
          echo $PATH  # 输出当前的PATH环境变量，方便调试

      - name: Configure qmake for ARM
        run: |
          cat <<EOF > qt.conf
          [Paths]
          Prefix = /home/runner/work/serial_port_debugger/Qt/5.15.2/gcc_64
          Binaries = /home/runner/work/serial_port_debugger/Qt/5.15.2/gcc_64/bin
          EOF
          export QT_CONF_FILE=$(pwd)/qt.conf

      - name: Build Qt Project
        run: |
          /home/runner/work/serial_port_debugger/Qt/5.15.2/gcc_64/bin/qmake "QMAKE_CXX=arm-linux-gnueabihf-g++" "QMAKE_CC=arm-linux-gnueabihf-gcc" "QMAKE_LINK=arm-linux-gnueabihf-g++" "QMAKE_LINK_C=arm-linux-gnueabihf-gcc"
          make

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: qt-build-linux-arm
          path: ./build/
